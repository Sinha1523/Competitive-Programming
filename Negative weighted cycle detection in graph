#include <bits/stdc++.h>
using namespace std;

class edge {
public:
    int a, b, c; 
    edge(int a, int b, int c) {
        this->a = a; 
        this->b = b; 
        this->c = c; 
    }
};

int dis[1005]; 
vector<edge> edge_list;

void Bellman_Ford(int n) { 
    for (int i = 0; i < n - 1; i++) { 
        for (auto ed : edge_list) { 
            int a = ed.a, b = ed.b, c = ed.c;
            if (dis[a] != INT_MAX && dis[a] + c < dis[b]) { 
                dis[b] = dis[a] + c;
            }
        }
    }
}

int main() {
    int n, e;
    cin >> n >> e;
    for (int i = 0; i < n; i++) {
        dis[i] = INT_MAX; 
    }

    dis[0] = 0; 
    while (e--) {
        int a, b, c; 
        cin >> a >> b >> c; 
        edge_list.push_back(edge(a, b, c));
    }
    Bellman_Ford(n);
    bool cycle = false;
    for (auto ed : edge_list) {
        int a = ed.a, b = ed.b, c = ed.c;
        if (dis[a] != INT_MAX && dis[a] + c < dis[b]) { 
            cycle = true; 
            break;
        }
    }
    if (cycle) {
        cout << "Negative weighted cycle detected\n";
    } else {
        for (int i = 0; i < n; i++) {
            cout << i << " -> " << dis[i]  << endl; 
        }
    }

    return 0;
}
